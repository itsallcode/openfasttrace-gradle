plugins {
    id 'java-gradle-plugin'
    id 'jacoco'
    id 'signing'
    id 'com.gradle.plugin-publish' version '1.2.2'
    id 'org.sonarqube' version '5.1.0.4882'
    id 'pl.droidsonroids.jacoco.testkit' version '1.0.12'
    id 'com.github.ben-manes.versions' version '0.51.0'
    id 'org.sonatype.gradle.plugins.scan' version '2.8.3'
}

repositories {
    if (!gradle.startParameter.taskNames.contains("publish")) {
        mavenLocal()
    }
    mavenCentral()
}

apply from: 'gradle/workAroundJacocoGradleTestKitIssueOnWindows.gradle'

version = '3.2.0'
group = 'org.itsallcode'

ext {
    gradlePluginId = 'org.itsallcode.openfasttrace'
    oftVersion = '4.2.0'
    uxVersion = '0.1.0'
    junitVersion = '5.11.0'
    if (project.hasProperty('oftSourceDir')) {
        oftSourceDir = file(project.oftSourceDir)
        useOftSources = oftSourceDir.exists()
        if (!useOftSources) {
            logger.warn "OFT source directory $oftSourceDir does not exist"
        }
    } else {
        oftSourceDir = 'oft-dir-not-found'
        useOftSources = false
    }
}

def compiledClassesFolders(File dir) {
    def classDirs = new HashSet()
    file(dir).eachFileRecurse(groovy.io.FileType.DIRECTORIES) {
        String normalizedName = it.toString().replace('\\', '/')
        if (normalizedName.endsWith('/target/classes') && !normalizedName.contains('testutil')) {
            classDirs.add(it)
        }
    }
    return classDirs
}

dependencies {
    if (useOftSources) {
        logger.lifecycle "Including OpenFastTrace sources from Maven target dir $oftSourceDir"
        implementation files(compiledClassesFolders(oftSourceDir)) {
            builtBy "compileOft"
        }
    } else {
        implementation "org.itsallcode.openfasttrace:openfasttrace-api:$oftVersion"
        implementation "org.itsallcode.openfasttrace:openfasttrace-core:$oftVersion"
        implementation "org.itsallcode.openfasttrace:openfasttrace-exporter-specobject:$oftVersion"
        runtimeOnly "org.itsallcode.openfasttrace:openfasttrace:$oftVersion"
    }
}

def getJavaVersion = {
    return project.hasProperty('javaVersion') ? project.getProperty('javaVersion') : 17
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(getJavaVersion())
    }
    modularity.inferModulePath = false
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:all'
    options.compilerArgs << '-Werror'
    options.encoding = 'UTF-8'
}

javadoc {
    failOnError = true
    options.addBooleanOption('html5', true)
    //options.addStringOption('Xwerror', '-quiet')
}

task compileOft(type: Exec) {
    workingDir oftSourceDir
    def mavenCommand = 'mvn'
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        mavenCommand = 'mvn.cmd'
    }
    commandLine mavenCommand, '-T', '1C', 'package', '-DskipTests', '-Dmaven.test.skip=true',
         '-Dmaven.site.skip=true', '-Dmaven.javadoc.skip=true', '-Dmaven.source.skip=true', '-Dossindex.skip=true',
         '-Djava.version=' + getJavaVersion()
}

// >> openfasttrace-ux


ext {
    if (project.hasProperty('uxSourceDir')) {
        uxSourceDir = file(project.uxSourceDir)
    } else {
        uxSourceDir = 'oft-dir-not-found'
    }
}

tasks.register("compileUx", Exec) {
    workingDir uxSourceDir

    commandLine 'npm', 'run', 'deploy'
}
compileUx.onlyIf { project.file(uxSourceDir).isDirectory() }

configurations {
    create("openfasttraceux")
}
dependencies {
    openfasttraceux "org.itsallcode:openfasttrace-ux:$uxVersion"
}

task addOftUxAsResource(type: Copy) {
    description "Adds the OpenFastTrace-UX ZIP artifact as file resources to the gradle plugin"
    dependsOn(compileUx)

    from configurations.getByName("openfasttraceux").getSingleFile()
    into layout.buildDirectory.dir("resources/main")
    rename { "openfasttrace-ux.zip" }
}
tasks.named("processResources") {
    dependsOn("addOftUxAsResource")
}

// << openfasttrace-ux

clean {
    def exampleProjects = rootProject.file('example-projects').listFiles()
    def propertyFiles = exampleProjects.collect { new File(it, 'gradle.properties') }
    propertyFiles.each { delete it }
}

gradlePlugin {
    website = 'https://github.com/itsallcode/openfasttrace-gradle'
    vcsUrl = 'https://github.com/itsallcode/openfasttrace-gradle.git'
    plugins {
        openFastTracePlugin {
            id = gradlePluginId
            implementationClass = 'org.itsallcode.openfasttrace.gradle.OpenFastTracePlugin'
            displayName = 'OpenFastTrace requirements tracing plugin'
            description = 'Gradle plugin for tracing requirements using OpenFastTrace'
            tags.addAll(['requirementstracing', 'requirements', 'tracing', 'reqtracing', 'openfasttrace', 'oft'])
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
}
tasks.withType(Sign) {
    onlyIf { !gradle.startParameter.taskNames.contains("publishToMavenLocal") }
}

testing {
    suites {
        test {
            useJUnitJupiter(junitVersion)
            dependencies {
                implementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
                implementation "org.hamcrest:hamcrest-core:3.0"
                implementation "com.jparams:to-string-verifier:1.4.8"
            }
        }
    }
}

test.onlyIf { rootProject.name == 'openfasttrace-gradle' }

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}

test {
    finalizedBy jacocoTestReport
}

project.tasks["sonar"].dependsOn jacocoTestReport

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "itsallcode"
    }
}

publishPlugins.dependsOn check

def isNonStable = { String version ->
  def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
  def regex = /^[0-9,.v-]+(-r)?$/
  return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
  gradleReleaseChannel = "current"
  rejectVersionIf {
    isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
  }
}

ossIndexAudit {
  allConfigurations = false
  useCache = true
  excludeVulnerabilityIds = []
  printBanner = false
}

rootProject.tasks["build"].dependsOn(tasks["ossIndexAudit"])
